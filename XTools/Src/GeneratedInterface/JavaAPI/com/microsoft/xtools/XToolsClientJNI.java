/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.microsoft.xtools;

public class XToolsClientJNI {
  public final static native java.math.BigInteger kInvalidSocketID_get();
  public final static native java.math.BigInteger kInvalidConnectionGUID_get();
  public final static native void delete_Receipt(long jarg1);
  public final static native void Receipt_Clear(long jarg1, Receipt jarg1_);
  public final static native long new_Receipt();
  public final static native void delete_LogManager(long jarg1);
  public final static native void LogManager_Log(long jarg1, LogManager jarg1_, int jarg2, String jarg3);
  public final static native void delete_LogWriter(long jarg1);
  public final static native void LogWriter_WriteLogEntry(long jarg1, LogWriter jarg1_, int jarg2, String jarg3);
  public final static native void LogWriter_WriteLogEntrySwigExplicitLogWriter(long jarg1, LogWriter jarg1_, int jarg2, String jarg3);
  public final static native long new_LogWriter();
  public final static native void LogWriter_director_connect(LogWriter obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void LogWriter_change_ownership(LogWriter obj, long cptr, boolean take_or_release);
  public final static native void Log_Info(String jarg1);
  public final static native void Log_Warning(String jarg1);
  public final static native void Log_Error(String jarg1);
  public final static native long new_Log();
  public final static native void delete_Log(long jarg1);
  public final static native void delete_Listener(long jarg1);
  public final static native void Listener_UnregisterAll(long jarg1, Listener jarg1_);
  public final static native boolean Listener_IsRegistered(long jarg1, Listener jarg1_);
  public final static native long new_Listener();
  public final static native long kInvalidXGuid_get();
  public final static native long new_XString__SWIG_0();
  public final static native long new_XString__SWIG_1(String jarg1);
  public final static native void delete_XString(long jarg1);
  public final static native long XString_GetLength(long jarg1, XString jarg1_);
  public final static native boolean XString_IsEqual(long jarg1, XString jarg1_, long jarg2, XString jarg2_);
  public final static native String XString_GetString(long jarg1, XString jarg1_);
  public final static native void NetworkOutMessage_Write__SWIG_0(long jarg1, NetworkOutMessage jarg1_, byte jarg2);
  public final static native void NetworkOutMessage_Write__SWIG_1(long jarg1, NetworkOutMessage jarg1_, short jarg2);
  public final static native void NetworkOutMessage_Write__SWIG_2(long jarg1, NetworkOutMessage jarg1_, int jarg2);
  public final static native void NetworkOutMessage_Write__SWIG_3(long jarg1, NetworkOutMessage jarg1_, long jarg2);
  public final static native void NetworkOutMessage_Write__SWIG_4(long jarg1, NetworkOutMessage jarg1_, float jarg2);
  public final static native void NetworkOutMessage_Write__SWIG_5(long jarg1, NetworkOutMessage jarg1_, double jarg2);
  public final static native void NetworkOutMessage_Write__SWIG_6(long jarg1, NetworkOutMessage jarg1_, long jarg2, XString jarg2_);
  public final static native void NetworkOutMessage_WriteArray(long jarg1, NetworkOutMessage jarg1_, byte[] jarg2, long jarg3);
  public final static native void NetworkOutMessage_Reset(long jarg1, NetworkOutMessage jarg1_);
  public final static native void delete_NetworkOutMessage(long jarg1);
  public final static native void delete_NetworkInMessage(long jarg1);
  public final static native short NetworkInMessage_ReadByte(long jarg1, NetworkInMessage jarg1_);
  public final static native short NetworkInMessage_ReadInt16(long jarg1, NetworkInMessage jarg1_);
  public final static native int NetworkInMessage_ReadInt32(long jarg1, NetworkInMessage jarg1_);
  public final static native long NetworkInMessage_ReadInt64(long jarg1, NetworkInMessage jarg1_);
  public final static native float NetworkInMessage_ReadFloat(long jarg1, NetworkInMessage jarg1_);
  public final static native double NetworkInMessage_ReadDouble(long jarg1, NetworkInMessage jarg1_);
  public final static native long NetworkInMessage_ReadString(long jarg1, NetworkInMessage jarg1_);
  public final static native void NetworkInMessage_ReadArray(long jarg1, NetworkInMessage jarg1_, byte[] jarg2, long jarg3);
  public final static native int NetworkInMessage_GetUnreadBitsCount(long jarg1, NetworkInMessage jarg1_);
  public final static native int NetworkInMessage_GetSize(long jarg1, NetworkInMessage jarg1_);
  public final static native void delete_NetworkConnectionListener(long jarg1);
  public final static native void NetworkConnectionListener_OnConnected(long jarg1, NetworkConnectionListener jarg1_, long jarg2, NetworkConnection jarg2_);
  public final static native void NetworkConnectionListener_OnConnectedSwigExplicitNetworkConnectionListener(long jarg1, NetworkConnectionListener jarg1_, long jarg2, NetworkConnection jarg2_);
  public final static native void NetworkConnectionListener_OnConnectFailed(long jarg1, NetworkConnectionListener jarg1_, long jarg2, NetworkConnection jarg2_);
  public final static native void NetworkConnectionListener_OnConnectFailedSwigExplicitNetworkConnectionListener(long jarg1, NetworkConnectionListener jarg1_, long jarg2, NetworkConnection jarg2_);
  public final static native void NetworkConnectionListener_OnDisconnected(long jarg1, NetworkConnectionListener jarg1_, long jarg2, NetworkConnection jarg2_);
  public final static native void NetworkConnectionListener_OnDisconnectedSwigExplicitNetworkConnectionListener(long jarg1, NetworkConnectionListener jarg1_, long jarg2, NetworkConnection jarg2_);
  public final static native void NetworkConnectionListener_OnMessageReceived(long jarg1, NetworkConnectionListener jarg1_, long jarg2, NetworkConnection jarg2_, long jarg3, NetworkInMessage jarg3_);
  public final static native void NetworkConnectionListener_OnMessageReceivedSwigExplicitNetworkConnectionListener(long jarg1, NetworkConnectionListener jarg1_, long jarg2, NetworkConnection jarg2_, long jarg3, NetworkInMessage jarg3_);
  public final static native long new_NetworkConnectionListener();
  public final static native void NetworkConnectionListener_director_connect(NetworkConnectionListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NetworkConnectionListener_change_ownership(NetworkConnectionListener obj, long cptr, boolean take_or_release);
  public final static native boolean NetworkConnection_IsConnected(long jarg1, NetworkConnection jarg1_);
  public final static native java.math.BigInteger NetworkConnection_GetConnectionGUID(long jarg1, NetworkConnection jarg1_);
  public final static native void NetworkConnection_Send__SWIG_0(long jarg1, NetworkConnection jarg1_, long jarg2, NetworkOutMessage jarg2_, int jarg3, int jarg4, int jarg5, boolean jarg6);
  public final static native void NetworkConnection_Send__SWIG_1(long jarg1, NetworkConnection jarg1_, long jarg2, NetworkOutMessage jarg2_, int jarg3, int jarg4, int jarg5);
  public final static native void NetworkConnection_Send__SWIG_2(long jarg1, NetworkConnection jarg1_, long jarg2, NetworkOutMessage jarg2_, int jarg3, int jarg4);
  public final static native void NetworkConnection_Send__SWIG_3(long jarg1, NetworkConnection jarg1_, long jarg2, NetworkOutMessage jarg2_, int jarg3);
  public final static native void NetworkConnection_Send__SWIG_4(long jarg1, NetworkConnection jarg1_, long jarg2, NetworkOutMessage jarg2_);
  public final static native void NetworkConnection_Broadcast__SWIG_0(long jarg1, NetworkConnection jarg1_, long jarg2, NetworkOutMessage jarg2_, int jarg3, int jarg4, int jarg5, boolean jarg6);
  public final static native void NetworkConnection_Broadcast__SWIG_1(long jarg1, NetworkConnection jarg1_, long jarg2, NetworkOutMessage jarg2_, int jarg3, int jarg4, int jarg5);
  public final static native void NetworkConnection_Broadcast__SWIG_2(long jarg1, NetworkConnection jarg1_, long jarg2, NetworkOutMessage jarg2_, int jarg3, int jarg4);
  public final static native void NetworkConnection_Broadcast__SWIG_3(long jarg1, NetworkConnection jarg1_, long jarg2, NetworkOutMessage jarg2_, int jarg3);
  public final static native void NetworkConnection_Broadcast__SWIG_4(long jarg1, NetworkConnection jarg1_, long jarg2, NetworkOutMessage jarg2_);
  public final static native void NetworkConnection_AddListener(long jarg1, NetworkConnection jarg1_, byte jarg2, long jarg3, NetworkConnectionListener jarg3_);
  public final static native void NetworkConnection_RemoveListener(long jarg1, NetworkConnection jarg1_, byte jarg2, long jarg3, NetworkConnectionListener jarg3_);
  public final static native boolean NetworkConnection_RegisterAsyncCallback(long jarg1, NetworkConnection jarg1_, byte jarg2, long jarg3, NetworkConnectionListener jarg3_);
  public final static native void NetworkConnection_UnregisterAsyncCallback(long jarg1, NetworkConnection jarg1_, byte jarg2);
  public final static native long NetworkConnection_CreateMessage(long jarg1, NetworkConnection jarg1_, byte jarg2);
  public final static native void NetworkConnection_ReturnMessage(long jarg1, NetworkConnection jarg1_, long jarg2, NetworkOutMessage jarg2_);
  public final static native void NetworkConnection_Disconnect(long jarg1, NetworkConnection jarg1_);
  public final static native long NetworkConnection_GetRemoteAddress(long jarg1, NetworkConnection jarg1_);
  public final static native void delete_NetworkConnection(long jarg1);
  public final static native long User_GetName(long jarg1, User jarg1_);
  public final static native long User_GetID(long jarg1, User jarg1_);
  public final static native boolean User_IsValid(long jarg1, User jarg1_);
  public final static native boolean User_GetMuteState(long jarg1, User jarg1_);
  public final static native void delete_User(long jarg1);
  public final static native int Element_GetElementType(long jarg1, Element jarg1_);
  public final static native long Element_GetGUID(long jarg1, Element jarg1_);
  public final static native long Element_GetName(long jarg1, Element jarg1_);
  public final static native long Element_GetParent(long jarg1, Element jarg1_);
  public final static native boolean Element_IsValid(long jarg1, Element jarg1_);
  public final static native void delete_Element(long jarg1);
  public final static native long FloatElement_Cast(long jarg1, Element jarg1_);
  public final static native float FloatElement_GetValue(long jarg1, FloatElement jarg1_);
  public final static native void FloatElement_SetValue(long jarg1, FloatElement jarg1_, float jarg2);
  public final static native void delete_FloatElement(long jarg1);
  public final static native long IntElement_Cast(long jarg1, Element jarg1_);
  public final static native int IntElement_GetValue(long jarg1, IntElement jarg1_);
  public final static native void IntElement_SetValue(long jarg1, IntElement jarg1_, int jarg2);
  public final static native void delete_IntElement(long jarg1);
  public final static native long StringElement_Cast(long jarg1, Element jarg1_);
  public final static native long StringElement_GetValue(long jarg1, StringElement jarg1_);
  public final static native void StringElement_SetValue(long jarg1, StringElement jarg1_, long jarg2, XString jarg2_);
  public final static native void delete_StringElement(long jarg1);
  public final static native void delete_ObjectElementListener(long jarg1);
  public final static native void ObjectElementListener_OnIntElementChanged(long jarg1, ObjectElementListener jarg1_, long jarg2, int jarg3);
  public final static native void ObjectElementListener_OnIntElementChangedSwigExplicitObjectElementListener(long jarg1, ObjectElementListener jarg1_, long jarg2, int jarg3);
  public final static native void ObjectElementListener_OnFloatElementChanged(long jarg1, ObjectElementListener jarg1_, long jarg2, float jarg3);
  public final static native void ObjectElementListener_OnFloatElementChangedSwigExplicitObjectElementListener(long jarg1, ObjectElementListener jarg1_, long jarg2, float jarg3);
  public final static native void ObjectElementListener_OnStringElementChanged(long jarg1, ObjectElementListener jarg1_, long jarg2, long jarg3, XString jarg3_);
  public final static native void ObjectElementListener_OnStringElementChangedSwigExplicitObjectElementListener(long jarg1, ObjectElementListener jarg1_, long jarg2, long jarg3, XString jarg3_);
  public final static native void ObjectElementListener_OnElementAdded(long jarg1, ObjectElementListener jarg1_, long jarg2, Element jarg2_);
  public final static native void ObjectElementListener_OnElementAddedSwigExplicitObjectElementListener(long jarg1, ObjectElementListener jarg1_, long jarg2, Element jarg2_);
  public final static native void ObjectElementListener_OnElementDeleted(long jarg1, ObjectElementListener jarg1_, long jarg2, Element jarg2_);
  public final static native void ObjectElementListener_OnElementDeletedSwigExplicitObjectElementListener(long jarg1, ObjectElementListener jarg1_, long jarg2, Element jarg2_);
  public final static native long new_ObjectElementListener();
  public final static native void ObjectElementListener_director_connect(ObjectElementListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ObjectElementListener_change_ownership(ObjectElementListener obj, long cptr, boolean take_or_release);
  public final static native long ObjectElement_Cast(long jarg1, Element jarg1_);
  public final static native long ObjectElement_CreateIntElement(long jarg1, ObjectElement jarg1_, long jarg2, XString jarg2_, int jarg3);
  public final static native long ObjectElement_CreateFloatElement(long jarg1, ObjectElement jarg1_, long jarg2, XString jarg2_, float jarg3);
  public final static native long ObjectElement_CreateStringElement(long jarg1, ObjectElement jarg1_, long jarg2, XString jarg2_, long jarg3, XString jarg3_);
  public final static native long ObjectElement_CreateObjectElement__SWIG_0(long jarg1, ObjectElement jarg1_, long jarg2, XString jarg2_, long jarg3, User jarg3_);
  public final static native long ObjectElement_CreateObjectElement__SWIG_1(long jarg1, ObjectElement jarg1_, long jarg2, XString jarg2_);
  public final static native int ObjectElement_GetElementCount(long jarg1, ObjectElement jarg1_);
  public final static native long ObjectElement_GetElement__SWIG_0(long jarg1, ObjectElement jarg1_, long jarg2);
  public final static native long ObjectElement_GetElement__SWIG_1(long jarg1, ObjectElement jarg1_, long jarg2, XString jarg2_);
  public final static native long ObjectElement_GetElementAt(long jarg1, ObjectElement jarg1_, int jarg2);
  public final static native void ObjectElement_RemoveElement__SWIG_0(long jarg1, ObjectElement jarg1_, long jarg2, Element jarg2_);
  public final static native void ObjectElement_RemoveElement__SWIG_1(long jarg1, ObjectElement jarg1_, long jarg2);
  public final static native void ObjectElement_RemoveElementAt(long jarg1, ObjectElement jarg1_, int jarg2);
  public final static native void ObjectElement_AddListener(long jarg1, ObjectElement jarg1_, long jarg2, ObjectElementListener jarg2_);
  public final static native void ObjectElement_RemoveListener(long jarg1, ObjectElement jarg1_, long jarg2, ObjectElementListener jarg2_);
  public final static native long ObjectElement_GetOwnerID(long jarg1, ObjectElement jarg1_);
  public final static native void delete_ObjectElement(long jarg1);
  public final static native void SyncListener_OnSyncChangesBegin(long jarg1, SyncListener jarg1_);
  public final static native void SyncListener_OnSyncChangesBeginSwigExplicitSyncListener(long jarg1, SyncListener jarg1_);
  public final static native void SyncListener_OnSyncChangesEnd(long jarg1, SyncListener jarg1_);
  public final static native void SyncListener_OnSyncChangesEndSwigExplicitSyncListener(long jarg1, SyncListener jarg1_);
  public final static native long new_SyncListener();
  public final static native void delete_SyncListener(long jarg1);
  public final static native void SyncListener_director_connect(SyncListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void SyncListener_change_ownership(SyncListener obj, long cptr, boolean take_or_release);
  public final static native void delete_SessionListener(long jarg1);
  public final static native void SessionListener_OnJoiningSession(long jarg1, SessionListener jarg1_);
  public final static native void SessionListener_OnJoiningSessionSwigExplicitSessionListener(long jarg1, SessionListener jarg1_);
  public final static native void SessionListener_OnJoinSucceeded(long jarg1, SessionListener jarg1_);
  public final static native void SessionListener_OnJoinSucceededSwigExplicitSessionListener(long jarg1, SessionListener jarg1_);
  public final static native void SessionListener_OnJoinFailed(long jarg1, SessionListener jarg1_);
  public final static native void SessionListener_OnJoinFailedSwigExplicitSessionListener(long jarg1, SessionListener jarg1_);
  public final static native void SessionListener_OnSessionDisconnected(long jarg1, SessionListener jarg1_);
  public final static native void SessionListener_OnSessionDisconnectedSwigExplicitSessionListener(long jarg1, SessionListener jarg1_);
  public final static native long new_SessionListener();
  public final static native void SessionListener_director_connect(SessionListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void SessionListener_change_ownership(SessionListener obj, long cptr, boolean take_or_release);
  public final static native int Session_GetMachineSessionState(long jarg1, Session jarg1_);
  public final static native void Session_AddListener(long jarg1, Session jarg1_, long jarg2, SessionListener jarg2_);
  public final static native void Session_RemoveListener(long jarg1, Session jarg1_, long jarg2, SessionListener jarg2_);
  public final static native boolean Session_IsJoined(long jarg1, Session jarg1_);
  public final static native boolean Session_Join(long jarg1, Session jarg1_);
  public final static native void Session_Leave(long jarg1, Session jarg1_);
  public final static native int Session_GetUserCount(long jarg1, Session jarg1_);
  public final static native long Session_GetUser(long jarg1, Session jarg1_, int jarg2);
  public final static native int Session_GetSessionType(long jarg1, Session jarg1_);
  public final static native long Session_GetName(long jarg1, Session jarg1_);
  public final static native long Session_GetSessionNetworkConnection(long jarg1, Session jarg1_);
  public final static native void delete_Session(long jarg1);
  public final static native void delete_SessionManagerListener(long jarg1);
  public final static native void SessionManagerListener_OnCreateSucceeded(long jarg1, SessionManagerListener jarg1_, long jarg2, Session jarg2_);
  public final static native void SessionManagerListener_OnCreateSucceededSwigExplicitSessionManagerListener(long jarg1, SessionManagerListener jarg1_, long jarg2, Session jarg2_);
  public final static native void SessionManagerListener_OnCreateFailed(long jarg1, SessionManagerListener jarg1_, long jarg2, XString jarg2_);
  public final static native void SessionManagerListener_OnCreateFailedSwigExplicitSessionManagerListener(long jarg1, SessionManagerListener jarg1_, long jarg2, XString jarg2_);
  public final static native void SessionManagerListener_OnSessionAdded(long jarg1, SessionManagerListener jarg1_, long jarg2, Session jarg2_);
  public final static native void SessionManagerListener_OnSessionAddedSwigExplicitSessionManagerListener(long jarg1, SessionManagerListener jarg1_, long jarg2, Session jarg2_);
  public final static native void SessionManagerListener_OnSessionClosed(long jarg1, SessionManagerListener jarg1_, long jarg2, Session jarg2_);
  public final static native void SessionManagerListener_OnSessionClosedSwigExplicitSessionManagerListener(long jarg1, SessionManagerListener jarg1_, long jarg2, Session jarg2_);
  public final static native void SessionManagerListener_OnUserJoinedSession(long jarg1, SessionManagerListener jarg1_, long jarg2, Session jarg2_, long jarg3, User jarg3_);
  public final static native void SessionManagerListener_OnUserJoinedSessionSwigExplicitSessionManagerListener(long jarg1, SessionManagerListener jarg1_, long jarg2, Session jarg2_, long jarg3, User jarg3_);
  public final static native void SessionManagerListener_OnUserLeftSession(long jarg1, SessionManagerListener jarg1_, long jarg2, Session jarg2_, long jarg3, User jarg3_);
  public final static native void SessionManagerListener_OnUserLeftSessionSwigExplicitSessionManagerListener(long jarg1, SessionManagerListener jarg1_, long jarg2, Session jarg2_, long jarg3, User jarg3_);
  public final static native void SessionManagerListener_OnUserChanged(long jarg1, SessionManagerListener jarg1_, long jarg2, Session jarg2_, long jarg3, User jarg3_);
  public final static native void SessionManagerListener_OnUserChangedSwigExplicitSessionManagerListener(long jarg1, SessionManagerListener jarg1_, long jarg2, Session jarg2_, long jarg3, User jarg3_);
  public final static native void SessionManagerListener_OnServerConnected(long jarg1, SessionManagerListener jarg1_);
  public final static native void SessionManagerListener_OnServerConnectedSwigExplicitSessionManagerListener(long jarg1, SessionManagerListener jarg1_);
  public final static native void SessionManagerListener_OnServerDisconnected(long jarg1, SessionManagerListener jarg1_);
  public final static native void SessionManagerListener_OnServerDisconnectedSwigExplicitSessionManagerListener(long jarg1, SessionManagerListener jarg1_);
  public final static native long new_SessionManagerListener();
  public final static native void SessionManagerListener_director_connect(SessionManagerListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void SessionManagerListener_change_ownership(SessionManagerListener obj, long cptr, boolean take_or_release);
  public final static native void SessionManager_AddListener(long jarg1, SessionManager jarg1_, long jarg2, SessionManagerListener jarg2_);
  public final static native void SessionManager_RemoveListener(long jarg1, SessionManager jarg1_, long jarg2, SessionManagerListener jarg2_);
  public final static native boolean SessionManager_CreateSession(long jarg1, SessionManager jarg1_, long jarg2, XString jarg2_);
  public final static native int SessionManager_GetSessionCount(long jarg1, SessionManager jarg1_);
  public final static native long SessionManager_GetSession(long jarg1, SessionManager jarg1_, int jarg2);
  public final static native long SessionManager_GetCurrentSession(long jarg1, SessionManager jarg1_);
  public final static native long SessionManager_GetCurrentUser(long jarg1, SessionManager jarg1_);
  public final static native boolean SessionManager_IsServerConnected(long jarg1, SessionManager jarg1_);
  public final static native void delete_SessionManager(long jarg1);
  public final static native void delete_UserPresenceManagerListener(long jarg1);
  public final static native void UserPresenceManagerListener_OnUserPresenceChanged(long jarg1, UserPresenceManagerListener jarg1_, long jarg2, User jarg2_);
  public final static native void UserPresenceManagerListener_OnUserPresenceChangedSwigExplicitUserPresenceManagerListener(long jarg1, UserPresenceManagerListener jarg1_, long jarg2, User jarg2_);
  public final static native long new_UserPresenceManagerListener();
  public final static native void UserPresenceManagerListener_director_connect(UserPresenceManagerListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void UserPresenceManagerListener_change_ownership(UserPresenceManagerListener obj, long cptr, boolean take_or_release);
  public final static native void UserPresenceManager_AddListener(long jarg1, UserPresenceManager jarg1_, long jarg2, UserPresenceManagerListener jarg2_);
  public final static native void UserPresenceManager_RemoveListener(long jarg1, UserPresenceManager jarg1_, long jarg2, UserPresenceManagerListener jarg2_);
  public final static native boolean UserPresenceManager_GetMuteState(long jarg1, UserPresenceManager jarg1_);
  public final static native void UserPresenceManager_SetMuteState(long jarg1, UserPresenceManager jarg1_, boolean jarg2);
  public final static native void UserPresenceManager_SetName(long jarg1, UserPresenceManager jarg1_, long jarg2, XString jarg2_);
  public final static native long UserPresenceManager_GetName(long jarg1, UserPresenceManager jarg1_);
  public final static native void UserPresenceManager_SetUser(long jarg1, UserPresenceManager jarg1_, long jarg2, User jarg2_);
  public final static native void delete_UserPresenceManager(long jarg1);
  public final static native long new_ClientConfig(int jarg1);
  public final static native int ClientConfig_GetRole(long jarg1, ClientConfig jarg1_);
  public final static native String ClientConfig_GetServerAddress(long jarg1, ClientConfig jarg1_);
  public final static native boolean ClientConfig_SetServerAddress(long jarg1, ClientConfig jarg1_, String jarg2);
  public final static native int ClientConfig_GetServerPort(long jarg1, ClientConfig jarg1_);
  public final static native boolean ClientConfig_SetServerPort(long jarg1, ClientConfig jarg1_, int jarg2);
  public final static native long ClientConfig_GetLogWriter(long jarg1, ClientConfig jarg1_);
  public final static native void ClientConfig_SetLogWriter(long jarg1, ClientConfig jarg1_, long jarg2, LogWriter jarg2_);
  public final static native boolean ClientConfig_GetIsAudioEndpoint(long jarg1, ClientConfig jarg1_);
  public final static native void ClientConfig_SetIsAudioEndpoint(long jarg1, ClientConfig jarg1_, boolean jarg2);
  public final static native void delete_ClientConfig(long jarg1);
  public final static native void AudioManager_SetMicrophoneEnabled(long jarg1, AudioManager jarg1_, boolean jarg2);
  public final static native void delete_AudioManager(long jarg1);
  public final static native void delete_ProfileManager(long jarg1);
  public final static native void ProfileManager_BeginRange(long jarg1, ProfileManager jarg1_, String jarg2);
  public final static native void ProfileManager_EndRange(long jarg1, ProfileManager jarg1_);
  public final static native void ProfileManager_Log(long jarg1, ProfileManager jarg1_, int jarg2, String jarg3);
  public final static native void Profile_BeginRange(String jarg1);
  public final static native void Profile_EndRange();
  public final static native long new_Profile();
  public final static native void delete_Profile(long jarg1);
  public final static native long new_Settings();
  public final static native long Settings_GetServerAddress(long jarg1, Settings jarg1_);
  public final static native int Settings_GetServerPort(long jarg1, Settings jarg1_);
  public final static native long Settings_GetViewerAddress(long jarg1, Settings jarg1_);
  public final static native int Settings_GetViewerPort(long jarg1, Settings jarg1_);
  public final static native long Settings_GetLocalUserName(long jarg1, Settings jarg1_);
  public final static native void delete_Settings(long jarg1);
  public final static native boolean PairMaker_IsReceiver(long jarg1, PairMaker jarg1_);
  public final static native boolean PairMaker_IsReceiverSwigExplicitPairMaker(long jarg1, PairMaker jarg1_);
  public final static native int PairMaker_GetAddressCount(long jarg1, PairMaker jarg1_);
  public final static native long PairMaker_GetAddress(long jarg1, PairMaker jarg1_, int jarg2);
  public final static native long PairMaker_GetAddressSwigExplicitPairMaker(long jarg1, PairMaker jarg1_, int jarg2);
  public final static native int PairMaker_GetPort(long jarg1, PairMaker jarg1_);
  public final static native int PairMaker_GetPortSwigExplicitPairMaker(long jarg1, PairMaker jarg1_);
  public final static native void PairMaker_Update(long jarg1, PairMaker jarg1_);
  public final static native void PairMaker_UpdateSwigExplicitPairMaker(long jarg1, PairMaker jarg1_);
  public final static native boolean PairMaker_IsReadyToConnect(long jarg1, PairMaker jarg1_);
  public final static native boolean PairMaker_IsReadyToConnectSwigExplicitPairMaker(long jarg1, PairMaker jarg1_);
  public final static native int PairMaker_GetLocalKey(long jarg1, PairMaker jarg1_);
  public final static native int PairMaker_GetLocalKeySwigExplicitPairMaker(long jarg1, PairMaker jarg1_);
  public final static native int PairMaker_GetRemoteKey(long jarg1, PairMaker jarg1_);
  public final static native int PairMaker_GetRemoteKeySwigExplicitPairMaker(long jarg1, PairMaker jarg1_);
  public final static native long new_PairMaker();
  public final static native void delete_PairMaker(long jarg1);
  public final static native void PairMaker_director_connect(PairMaker obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void PairMaker_change_ownership(PairMaker obj, long cptr, boolean take_or_release);
  public final static native void PairingListener_PairingConnectionSucceeded(long jarg1, PairingListener jarg1_);
  public final static native void PairingListener_PairingConnectionSucceededSwigExplicitPairingListener(long jarg1, PairingListener jarg1_);
  public final static native void PairingListener_PairingConnectionFailed(long jarg1, PairingListener jarg1_, int jarg2);
  public final static native void PairingListener_PairingConnectionFailedSwigExplicitPairingListener(long jarg1, PairingListener jarg1_, int jarg2);
  public final static native long new_PairingListener();
  public final static native void delete_PairingListener(long jarg1);
  public final static native void PairingListener_director_connect(PairingListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void PairingListener_change_ownership(PairingListener obj, long cptr, boolean take_or_release);
  public final static native boolean PairingManager_HasPairingInfo(long jarg1, PairingManager jarg1_);
  public final static native void PairingManager_ClearPairingInfo(long jarg1, PairingManager jarg1_);
  public final static native boolean PairingManager_BeginConnecting(long jarg1, PairingManager jarg1_, long jarg2, PairingListener jarg2_);
  public final static native void PairingManager_CancelConnecting(long jarg1, PairingManager jarg1_);
  public final static native int PairingManager_BeginPairing(long jarg1, PairingManager jarg1_, long jarg2, PairMaker jarg2_, long jarg3, PairingListener jarg3_);
  public final static native void PairingManager_CancelPairing(long jarg1, PairingManager jarg1_);
  public final static native boolean PairingManager_IsPairing(long jarg1, PairingManager jarg1_);
  public final static native boolean PairingManager_IsConnected(long jarg1, PairingManager jarg1_);
  public final static native void delete_PairingManager(long jarg1);
  public final static native long XToolsManager_Create(long jarg1, ClientConfig jarg1_);
  public final static native long XToolsManager_GetSessionManager(long jarg1, XToolsManager jarg1_);
  public final static native long XToolsManager_GetUserPresenceManager(long jarg1, XToolsManager jarg1_);
  public final static native long XToolsManager_GetAudioManager(long jarg1, XToolsManager jarg1_);
  public final static native long XToolsManager_GetPairingManager(long jarg1, XToolsManager jarg1_);
  public final static native long XToolsManager_GetRootSyncObject(long jarg1, XToolsManager jarg1_);
  public final static native boolean XToolsManager_RegisterSyncListener(long jarg1, XToolsManager jarg1_, long jarg2, SyncListener jarg2_);
  public final static native void XToolsManager_Update(long jarg1, XToolsManager jarg1_);
  public final static native long XToolsManager_GetPairedConnection(long jarg1, XToolsManager jarg1_);
  public final static native long XToolsManager_GetServerConnection(long jarg1, XToolsManager jarg1_);
  public final static native long XToolsManager_GetSettings(long jarg1, XToolsManager jarg1_);
  public final static native void XToolsManager_SetServerConnectionInfo(long jarg1, XToolsManager jarg1_, long jarg2, XString jarg2_, long jarg3);
  public final static native long XToolsManager_GetLocalUser(long jarg1, XToolsManager jarg1_);
  public final static native void XToolsManager_SetUserName(long jarg1, XToolsManager jarg1_, long jarg2, XString jarg2_);
  public final static native void delete_XToolsManager(long jarg1);
  public final static native void delete_ImageTagLocation(long jarg1);
  public final static native int ImageTagLocation_GetTagId(long jarg1, ImageTagLocation jarg1_);
  public final static native float ImageTagLocation_GetPixelX(long jarg1, ImageTagLocation jarg1_, int jarg2);
  public final static native float ImageTagLocation_GetPixelY(long jarg1, ImageTagLocation jarg1_, int jarg2);
  public final static native float ImageTagLocation_GetModelViewMatrix(long jarg1, ImageTagLocation jarg1_, int jarg2, int jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9);
  public final static native void delete_ImageTagLocationListener(long jarg1);
  public final static native void ImageTagLocationListener_OnTagLocated(long jarg1, ImageTagLocationListener jarg1_, long jarg2, ImageTagLocation jarg2_);
  public final static native void ImageTagLocationListener_OnTagLocatedSwigExplicitImageTagLocationListener(long jarg1, ImageTagLocationListener jarg1_, long jarg2, ImageTagLocation jarg2_);
  public final static native void ImageTagLocationListener_OnTagLocatingCompleted(long jarg1, ImageTagLocationListener jarg1_);
  public final static native void ImageTagLocationListener_OnTagLocatingCompletedSwigExplicitImageTagLocationListener(long jarg1, ImageTagLocationListener jarg1_);
  public final static native long new_ImageTagLocationListener();
  public final static native void ImageTagLocationListener_director_connect(ImageTagLocationListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ImageTagLocationListener_change_ownership(ImageTagLocationListener obj, long cptr, boolean take_or_release);
  public final static native int TagImage_GetWidth(long jarg1, TagImage jarg1_);
  public final static native int TagImage_GetHeight(long jarg1, TagImage jarg1_);
  public final static native void TagImage_CopyImageData(long jarg1, TagImage jarg1_, byte[] jarg2, int jarg3, int jarg4);
  public final static native void delete_TagImage(long jarg1);
  public final static native void delete_ImageTagManager(long jarg1);
  public final static native void ImageTagManager_Update(long jarg1, ImageTagManager jarg1_);
  public final static native boolean ImageTagManager_FindTags(long jarg1, ImageTagManager jarg1_, byte[] jarg2, int jarg3, int jarg4, int jarg5, long jarg6, ImageTagLocationListener jarg6_);
  public final static native long ImageTagManager_CreateTagImage(long jarg1, ImageTagManager jarg1_, int jarg2);
  public final static native long ImageTagManager_Create();
  public final static native long new_DirectPairConnector__SWIG_0();
  public final static native long new_DirectPairConnector__SWIG_1(long jarg1, XString jarg1_);
  public final static native long new_DirectPairConnector__SWIG_2(long jarg1, XString jarg1_, int jarg2);
  public final static native boolean DirectPairConnector_IsReceiver(long jarg1, DirectPairConnector jarg1_);
  public final static native int DirectPairConnector_GetAddressCount(long jarg1, DirectPairConnector jarg1_);
  public final static native long DirectPairConnector_GetAddress(long jarg1, DirectPairConnector jarg1_, int jarg2);
  public final static native int DirectPairConnector_GetPort(long jarg1, DirectPairConnector jarg1_);
  public final static native void DirectPairConnector_Update(long jarg1, DirectPairConnector jarg1_);
  public final static native boolean DirectPairConnector_IsReadyToConnect(long jarg1, DirectPairConnector jarg1_);
  public final static native void DirectPairConnector_SetRemoteAddress(long jarg1, DirectPairConnector jarg1_, long jarg2, XString jarg2_);
  public final static native void DirectPairConnector_SetRemotePort(long jarg1, DirectPairConnector jarg1_, int jarg2);
  public final static native void delete_DirectPairConnector(long jarg1);
  public final static native long new_DirectPairReceiver__SWIG_0();
  public final static native long new_DirectPairReceiver__SWIG_1(int jarg1);
  public final static native boolean DirectPairReceiver_IsReceiver(long jarg1, DirectPairReceiver jarg1_);
  public final static native int DirectPairReceiver_GetAddressCount(long jarg1, DirectPairReceiver jarg1_);
  public final static native long DirectPairReceiver_GetAddress(long jarg1, DirectPairReceiver jarg1_, int jarg2);
  public final static native int DirectPairReceiver_GetPort(long jarg1, DirectPairReceiver jarg1_);
  public final static native void DirectPairReceiver_Update(long jarg1, DirectPairReceiver jarg1_);
  public final static native boolean DirectPairReceiver_IsReadyToConnect(long jarg1, DirectPairReceiver jarg1_);
  public final static native void DirectPairReceiver_SetIncomingPort(long jarg1, DirectPairReceiver jarg1_, int jarg2);
  public final static native void delete_DirectPairReceiver(long jarg1);
  public final static native long VisualPairReceiver_Create();
  public final static native long VisualPairReceiver_CreateTagImage(long jarg1, VisualPairReceiver jarg1_);
  public final static native void delete_VisualPairReceiver(long jarg1);
  public final static native long VisualPairConnector_Create();
  public final static native boolean VisualPairConnector_ProcessImage(long jarg1, VisualPairConnector jarg1_, byte[] jarg2, int jarg3, int jarg4, int jarg5);
  public final static native boolean VisualPairConnector_IsProcessingImage(long jarg1, VisualPairConnector jarg1_);
  public final static native void delete_VisualPairConnector(long jarg1);
  public final static native long NetworkConnectionListener_SWIGUpcast(long jarg1);
  public final static native long FloatElement_SWIGUpcast(long jarg1);
  public final static native long IntElement_SWIGUpcast(long jarg1);
  public final static native long StringElement_SWIGUpcast(long jarg1);
  public final static native long ObjectElementListener_SWIGUpcast(long jarg1);
  public final static native long ObjectElement_SWIGUpcast(long jarg1);
  public final static native long SyncListener_SWIGUpcast(long jarg1);
  public final static native long SessionListener_SWIGUpcast(long jarg1);
  public final static native long SessionManagerListener_SWIGUpcast(long jarg1);
  public final static native long UserPresenceManagerListener_SWIGUpcast(long jarg1);
  public final static native long PairingListener_SWIGUpcast(long jarg1);
  public final static native long ImageTagLocationListener_SWIGUpcast(long jarg1);
  public final static native long DirectPairConnector_SWIGUpcast(long jarg1);
  public final static native long DirectPairReceiver_SWIGUpcast(long jarg1);
  public final static native long VisualPairReceiver_SWIGUpcast(long jarg1);
  public final static native long VisualPairConnector_SWIGUpcast(long jarg1);

  public static void SwigDirector_LogWriter_WriteLogEntry(LogWriter self, int severity, String message) {
    self.WriteLogEntry(LogSeverity.swigToEnum(severity), message);
  }
  public static void SwigDirector_NetworkConnectionListener_OnConnected(NetworkConnectionListener self, long connection) {
    self.OnConnected((connection == 0) ? null : new NetworkConnection(connection, true));
  }
  public static void SwigDirector_NetworkConnectionListener_OnConnectFailed(NetworkConnectionListener self, long connection) {
    self.OnConnectFailed((connection == 0) ? null : new NetworkConnection(connection, true));
  }
  public static void SwigDirector_NetworkConnectionListener_OnDisconnected(NetworkConnectionListener self, long connection) {
    self.OnDisconnected((connection == 0) ? null : new NetworkConnection(connection, true));
  }
  public static void SwigDirector_NetworkConnectionListener_OnMessageReceived(NetworkConnectionListener self, long connection, long message) {
    self.OnMessageReceived((connection == 0) ? null : new NetworkConnection(connection, true), new NetworkInMessage(message, false));
  }
  public static void SwigDirector_ObjectElementListener_OnIntElementChanged(ObjectElementListener self, long elementID, int newValue) {
    self.OnIntElementChanged(elementID, newValue);
  }
  public static void SwigDirector_ObjectElementListener_OnFloatElementChanged(ObjectElementListener self, long elementID, float newValue) {
    self.OnFloatElementChanged(elementID, newValue);
  }
  public static void SwigDirector_ObjectElementListener_OnStringElementChanged(ObjectElementListener self, long elementID, long newValue) {
    self.OnStringElementChanged(elementID, (newValue == 0) ? null : new XString(newValue, true));
  }
  public static void SwigDirector_ObjectElementListener_OnElementAdded(ObjectElementListener self, long element) {
    self.OnElementAdded((element == 0) ? null : new Element(element, true));
  }
  public static void SwigDirector_ObjectElementListener_OnElementDeleted(ObjectElementListener self, long element) {
    self.OnElementDeleted((element == 0) ? null : new Element(element, true));
  }
  public static void SwigDirector_SyncListener_OnSyncChangesBegin(SyncListener self) {
    self.OnSyncChangesBegin();
  }
  public static void SwigDirector_SyncListener_OnSyncChangesEnd(SyncListener self) {
    self.OnSyncChangesEnd();
  }
  public static void SwigDirector_SessionListener_OnJoiningSession(SessionListener self) {
    self.OnJoiningSession();
  }
  public static void SwigDirector_SessionListener_OnJoinSucceeded(SessionListener self) {
    self.OnJoinSucceeded();
  }
  public static void SwigDirector_SessionListener_OnJoinFailed(SessionListener self) {
    self.OnJoinFailed();
  }
  public static void SwigDirector_SessionListener_OnSessionDisconnected(SessionListener self) {
    self.OnSessionDisconnected();
  }
  public static void SwigDirector_SessionManagerListener_OnCreateSucceeded(SessionManagerListener self, long newSession) {
    self.OnCreateSucceeded((newSession == 0) ? null : new Session(newSession, true));
  }
  public static void SwigDirector_SessionManagerListener_OnCreateFailed(SessionManagerListener self, long reason) {
    self.OnCreateFailed((reason == 0) ? null : new XString(reason, true));
  }
  public static void SwigDirector_SessionManagerListener_OnSessionAdded(SessionManagerListener self, long newSession) {
    self.OnSessionAdded((newSession == 0) ? null : new Session(newSession, true));
  }
  public static void SwigDirector_SessionManagerListener_OnSessionClosed(SessionManagerListener self, long session) {
    self.OnSessionClosed((session == 0) ? null : new Session(session, true));
  }
  public static void SwigDirector_SessionManagerListener_OnUserJoinedSession(SessionManagerListener self, long session, long newUser) {
    self.OnUserJoinedSession((session == 0) ? null : new Session(session, true), (newUser == 0) ? null : new User(newUser, true));
  }
  public static void SwigDirector_SessionManagerListener_OnUserLeftSession(SessionManagerListener self, long session, long user) {
    self.OnUserLeftSession((session == 0) ? null : new Session(session, true), (user == 0) ? null : new User(user, true));
  }
  public static void SwigDirector_SessionManagerListener_OnUserChanged(SessionManagerListener self, long session, long user) {
    self.OnUserChanged((session == 0) ? null : new Session(session, true), (user == 0) ? null : new User(user, true));
  }
  public static void SwigDirector_SessionManagerListener_OnServerConnected(SessionManagerListener self) {
    self.OnServerConnected();
  }
  public static void SwigDirector_SessionManagerListener_OnServerDisconnected(SessionManagerListener self) {
    self.OnServerDisconnected();
  }
  public static void SwigDirector_UserPresenceManagerListener_OnUserPresenceChanged(UserPresenceManagerListener self, long user) {
    self.OnUserPresenceChanged((user == 0) ? null : new User(user, true));
  }
  public static boolean SwigDirector_PairMaker_IsReceiver(PairMaker self) {
    return self.IsReceiver();
  }
  public static int SwigDirector_PairMaker_GetAddressCount(PairMaker self) {
    return self.GetAddressCount();
  }
  public static long SwigDirector_PairMaker_GetAddress(PairMaker self, int index) {
    return  XString.getCPtr(self.GetAddress(index)) ;
  }
  public static int SwigDirector_PairMaker_GetPort(PairMaker self) {
    return self.GetPort();
  }
  public static void SwigDirector_PairMaker_Update(PairMaker self) {
    self.Update();
  }
  public static boolean SwigDirector_PairMaker_IsReadyToConnect(PairMaker self) {
    return self.IsReadyToConnect();
  }
  public static int SwigDirector_PairMaker_GetLocalKey(PairMaker self) {
    return self.GetLocalKey();
  }
  public static int SwigDirector_PairMaker_GetRemoteKey(PairMaker self) {
    return self.GetRemoteKey();
  }
  public static void SwigDirector_PairingListener_PairingConnectionSucceeded(PairingListener self) {
    self.PairingConnectionSucceeded();
  }
  public static void SwigDirector_PairingListener_PairingConnectionFailed(PairingListener self, int reason) {
    self.PairingConnectionFailed(PairingResult.swigToEnum(reason));
  }
  public static void SwigDirector_ImageTagLocationListener_OnTagLocated(ImageTagLocationListener self, long location) {
    self.OnTagLocated((location == 0) ? null : new ImageTagLocation(location, true));
  }
  public static void SwigDirector_ImageTagLocationListener_OnTagLocatingCompleted(ImageTagLocationListener self) {
    self.OnTagLocatingCompleted();
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
