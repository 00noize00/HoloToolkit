/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace XTools {

public class ProfilerStream : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ProfilerStream(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ProfilerStream obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ProfilerStream() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          XToolsProfilerPINVOKE.delete_ProfilerStream(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void AddListener(ProfilerStreamListener newListener) {
    XToolsProfilerPINVOKE.ProfilerStream_AddListener(swigCPtr, ProfilerStreamListener.getCPtr(newListener));
  }

  public virtual void RemoveListener(ProfilerStreamListener oldListener) {
    XToolsProfilerPINVOKE.ProfilerStream_RemoveListener(swigCPtr, ProfilerStreamListener.getCPtr(oldListener));
  }

  public virtual bool IsConnected() {
    bool ret = XToolsProfilerPINVOKE.ProfilerStream_IsConnected(swigCPtr);
    return ret;
  }

  public virtual void Connect() {
    XToolsProfilerPINVOKE.ProfilerStream_Connect(swigCPtr);
  }

  public virtual void Disconnect() {
    XToolsProfilerPINVOKE.ProfilerStream_Disconnect(swigCPtr);
  }

  public virtual string GetRemoteSystemName() {
    string ret = XToolsProfilerPINVOKE.ProfilerStream_GetRemoteSystemName(swigCPtr);
    return ret;
  }

}

}
