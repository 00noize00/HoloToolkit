/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace XTools {

public class ProfilerStreamManager : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ProfilerStreamManager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ProfilerStreamManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ProfilerStreamManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          XToolsProfilerPINVOKE.delete_ProfilerStreamManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static ProfilerStreamManager Create() {
    global::System.IntPtr cPtr = XToolsProfilerPINVOKE.ProfilerStreamManager_Create();
    ProfilerStreamManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new ProfilerStreamManager(cPtr, true);
    return ret; 
  }

  public virtual ProfilerStream CreateStream(string remoteSystemName, SystemRole role) {
    global::System.IntPtr cPtr = XToolsProfilerPINVOKE.ProfilerStreamManager_CreateStream(swigCPtr, remoteSystemName, (int)role);
    ProfilerStream ret = (cPtr == global::System.IntPtr.Zero) ? null : new ProfilerStream(cPtr, true);
    if (XToolsProfilerPINVOKE.SWIGPendingException.Pending) throw XToolsProfilerPINVOKE.SWIGPendingException.Retrieve();
    return ret; 
  }

  public virtual void CloseStream(ProfilerStream stream) {
    XToolsProfilerPINVOKE.ProfilerStreamManager_CloseStream(swigCPtr, ProfilerStream.getCPtr(stream));
  }

  public virtual void Update() {
    XToolsProfilerPINVOKE.ProfilerStreamManager_Update(swigCPtr);
  }

}

}
