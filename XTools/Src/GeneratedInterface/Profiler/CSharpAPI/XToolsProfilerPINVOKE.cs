/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace XTools {

class XToolsProfilerPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="SWIGRegisterExceptionCallbacks_XToolsProfiler")]
    public static extern void SWIGRegisterExceptionCallbacks_XToolsProfiler(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_XToolsProfiler")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_XToolsProfiler(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_XToolsProfiler(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_XToolsProfiler(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(XToolsProfilerPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(XToolsProfilerPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="SWIGRegisterStringCallback_XToolsProfiler")]
    public static extern void SWIGRegisterStringCallback_XToolsProfiler(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_XToolsProfiler(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static XToolsProfilerPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_kInvalidSocketID_get")]
  public static extern ulong kInvalidSocketID_get();

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_kInvalidConnectionGUID_get")]
  public static extern ulong kInvalidConnectionGUID_get();

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_delete_LogManager")]
  public static extern void delete_LogManager(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_LogManager_Log")]
  public static extern void LogManager_Log(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.LPStr)]string jarg3);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_delete_LogWriter")]
  public static extern void delete_LogWriter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_LogWriter_WriteLogEntry")]
  public static extern void LogWriter_WriteLogEntry(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_LogWriter_WriteLogEntrySwigExplicitLogWriter")]
  public static extern void LogWriter_WriteLogEntrySwigExplicitLogWriter(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_new_LogWriter")]
  public static extern global::System.IntPtr new_LogWriter();

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_LogWriter_director_connect")]
  public static extern void LogWriter_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, LogWriter.SwigDelegateLogWriter_0 delegate0);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_delete_Receipt")]
  public static extern void delete_Receipt(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_Receipt_Clear")]
  public static extern void Receipt_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_new_Receipt")]
  public static extern global::System.IntPtr new_Receipt();

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_new_XString__SWIG_0")]
  public static extern global::System.IntPtr new_XString__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_new_XString__SWIG_1")]
  public static extern global::System.IntPtr new_XString__SWIG_1(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_delete_XString")]
  public static extern void delete_XString(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_XString_GetLength")]
  public static extern uint XString_GetLength(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_XString_IsEqual")]
  [return: global::System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]
  public static extern bool XString_IsEqual(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_XString_GetString")]
  public static extern string XString_GetString(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_delete_Listener")]
  public static extern void delete_Listener(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_Listener_UnregisterAll")]
  public static extern void Listener_UnregisterAll(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_Listener_IsRegistered")]
  [return: global::System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]
  public static extern bool Listener_IsRegistered(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_new_Listener")]
  public static extern global::System.IntPtr new_Listener();

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_new_DiscoveredSystem")]
  public static extern global::System.IntPtr new_DiscoveredSystem(string jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_DiscoveredSystem_GetName")]
  public static extern string DiscoveredSystem_GetName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_DiscoveredSystem_GetAddress")]
  public static extern string DiscoveredSystem_GetAddress(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_DiscoveredSystem_GetRole")]
  public static extern int DiscoveredSystem_GetRole(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_delete_DiscoveredSystem")]
  public static extern void delete_DiscoveredSystem(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_delete_DiscoveryClientListener")]
  public static extern void delete_DiscoveryClientListener(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_DiscoveryClientListener_OnRemoteSystemDiscovered")]
  public static extern void DiscoveryClientListener_OnRemoteSystemDiscovered(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_DiscoveryClientListener_OnRemoteSystemDiscoveredSwigExplicitDiscoveryClientListener")]
  public static extern void DiscoveryClientListener_OnRemoteSystemDiscoveredSwigExplicitDiscoveryClientListener(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_DiscoveryClientListener_OnRemoteSystemLost")]
  public static extern void DiscoveryClientListener_OnRemoteSystemLost(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_DiscoveryClientListener_OnRemoteSystemLostSwigExplicitDiscoveryClientListener")]
  public static extern void DiscoveryClientListener_OnRemoteSystemLostSwigExplicitDiscoveryClientListener(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_new_DiscoveryClientListener")]
  public static extern global::System.IntPtr new_DiscoveryClientListener();

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_DiscoveryClientListener_director_connect")]
  public static extern void DiscoveryClientListener_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, DiscoveryClientListener.SwigDelegateDiscoveryClientListener_0 delegate0, DiscoveryClientListener.SwigDelegateDiscoveryClientListener_1 delegate1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_DiscoveryClient_Create")]
  public static extern global::System.IntPtr DiscoveryClient_Create();

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_DiscoveryClient_Ping")]
  public static extern void DiscoveryClient_Ping(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_DiscoveryClient_GetDiscoveredCount")]
  public static extern uint DiscoveryClient_GetDiscoveredCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_DiscoveryClient_GetDiscoveredSystem")]
  public static extern global::System.IntPtr DiscoveryClient_GetDiscoveredSystem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_DiscoveryClient_Update")]
  public static extern void DiscoveryClient_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_DiscoveryClient_AddListener")]
  public static extern void DiscoveryClient_AddListener(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_DiscoveryClient_RemoveListener")]
  public static extern void DiscoveryClient_RemoveListener(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_delete_DiscoveryClient")]
  public static extern void delete_DiscoveryClient(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_delete_LogMessage")]
  public static extern void delete_LogMessage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_LogMessage_GetSeverity")]
  public static extern int LogMessage_GetSeverity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_LogMessage_GetLogMessage")]
  public static extern string LogMessage_GetLogMessage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_new_ProfileSample")]
  public static extern global::System.IntPtr new_ProfileSample(string jarg1, ulong jarg2, ulong jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfileSample_GetName")]
  public static extern string ProfileSample_GetName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfileSample_GetStartTime")]
  public static extern ulong ProfileSample_GetStartTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfileSample_GetDuration")]
  public static extern ulong ProfileSample_GetDuration(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfileSample_GetParentIndex")]
  public static extern int ProfileSample_GetParentIndex(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_delete_ProfileSample")]
  public static extern void delete_ProfileSample(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_new_ProfileThread")]
  public static extern global::System.IntPtr new_ProfileThread(ulong jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfileThread_GetThreadID")]
  public static extern ulong ProfileThread_GetThreadID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfileThread_GetSampleCount")]
  public static extern int ProfileThread_GetSampleCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfileThread_GetSample")]
  public static extern global::System.IntPtr ProfileThread_GetSample(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfileThread_AddSample")]
  public static extern void ProfileThread_AddSample(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_delete_ProfileThread")]
  public static extern void delete_ProfileThread(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_new_ProfileFrame")]
  public static extern global::System.IntPtr new_ProfileFrame();

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfileFrame_GetThreadCount")]
  public static extern int ProfileFrame_GetThreadCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfileFrame_GetThread")]
  public static extern global::System.IntPtr ProfileFrame_GetThread(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfileFrame_GetLogMessageCount")]
  public static extern int ProfileFrame_GetLogMessageCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfileFrame_GetLogMessage")]
  public static extern global::System.IntPtr ProfileFrame_GetLogMessage(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfileFrame_AddThread")]
  public static extern void ProfileFrame_AddThread(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfileFrame_AddMessage")]
  public static extern void ProfileFrame_AddMessage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_delete_ProfileFrame")]
  public static extern void delete_ProfileFrame(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_delete_ProfilerStreamListener")]
  public static extern void delete_ProfilerStreamListener(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStreamListener_OnConnected")]
  public static extern void ProfilerStreamListener_OnConnected(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStreamListener_OnConnectedSwigExplicitProfilerStreamListener")]
  public static extern void ProfilerStreamListener_OnConnectedSwigExplicitProfilerStreamListener(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStreamListener_OnConnectFailed")]
  public static extern void ProfilerStreamListener_OnConnectFailed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStreamListener_OnConnectFailedSwigExplicitProfilerStreamListener")]
  public static extern void ProfilerStreamListener_OnConnectFailedSwigExplicitProfilerStreamListener(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStreamListener_OnDisconnected")]
  public static extern void ProfilerStreamListener_OnDisconnected(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStreamListener_OnDisconnectedSwigExplicitProfilerStreamListener")]
  public static extern void ProfilerStreamListener_OnDisconnectedSwigExplicitProfilerStreamListener(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStreamListener_OnReceiveProfileFrame")]
  public static extern void ProfilerStreamListener_OnReceiveProfileFrame(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStreamListener_OnReceiveProfileFrameSwigExplicitProfilerStreamListener")]
  public static extern void ProfilerStreamListener_OnReceiveProfileFrameSwigExplicitProfilerStreamListener(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_new_ProfilerStreamListener")]
  public static extern global::System.IntPtr new_ProfilerStreamListener();

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStreamListener_director_connect")]
  public static extern void ProfilerStreamListener_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, ProfilerStreamListener.SwigDelegateProfilerStreamListener_0 delegate0, ProfilerStreamListener.SwigDelegateProfilerStreamListener_1 delegate1, ProfilerStreamListener.SwigDelegateProfilerStreamListener_2 delegate2, ProfilerStreamListener.SwigDelegateProfilerStreamListener_3 delegate3);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStream_AddListener")]
  public static extern void ProfilerStream_AddListener(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStream_RemoveListener")]
  public static extern void ProfilerStream_RemoveListener(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStream_IsConnected")]
  [return: global::System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]
  public static extern bool ProfilerStream_IsConnected(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStream_Connect")]
  public static extern void ProfilerStream_Connect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStream_Disconnect")]
  public static extern void ProfilerStream_Disconnect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStream_GetRemoteSystemName")]
  public static extern string ProfilerStream_GetRemoteSystemName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_delete_ProfilerStream")]
  public static extern void delete_ProfilerStream(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStreamManager_Create")]
  public static extern global::System.IntPtr ProfilerStreamManager_Create();

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStreamManager_CreateStream")]
  public static extern global::System.IntPtr ProfilerStreamManager_CreateStream(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStreamManager_CloseStream")]
  public static extern void ProfilerStreamManager_CloseStream(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStreamManager_Update")]
  public static extern void ProfilerStreamManager_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_delete_ProfilerStreamManager")]
  public static extern void delete_ProfilerStreamManager(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_DiscoveryClientListener_SWIGUpcast")]
  public static extern global::System.IntPtr DiscoveryClientListener_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("XToolsProfiler", EntryPoint="CSharp_ProfilerStreamListener_SWIGUpcast")]
  public static extern global::System.IntPtr ProfilerStreamListener_SWIGUpcast(global::System.IntPtr jarg1);
}

}
